/** Mechanics of the 3D pong game **/
class Pong3dGame {

    static Pong3dGame instance; // a 3D Pong game instance     
    field Bat bat;              // the bat
    field Ball ball;            // the ball
    field boolean exit;         // true when the game is over
    field int score;            // the current score.

    field Scene scene;

    /** Constructs a new Pong3dGame game. */
    constructor Pong3dGame new() {
	    do Screen.clearScreen();

        let scene = Scene.new();
        let ball = Ball.new(250, 120, 0, 16, 4, 4, 4);
        let bat = Bat.new(250, 120, 15, 175, 100);

        do Output.moveCursor(22,0);
	    do Output.printString("Score: 0");
	
	    let exit = false;
	    let score = 0;

        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do bat.dispose();
	    do ball.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Creates an instance of 3D Pong game, and stores it. */
    function void newInstance() {
        let instance = Pong3dGame.new();
        return;
    }
    
    /** Returns the single instance of this Pong game. */
    function PongGame getInstance() {
        return instance;
    }

    method void printScore() {
        var String scoreString;
        let scoreString = "Score: ";
        do Output.moveCursor(22,0);
	    do Output.printString(scoreString);
        do Output.printInt(score);
        do scoreString.dispose();
        return;
    }

    /** Starts the game, and handles inputs from the user that control the bat's movement direction. **/
    method boolean run() {
        var char key;

        while (~exit) {
        
            // Waits for a key to be pressed.
            while ((key = 0) & (~exit)) {
                let key = Keyboard.keyPressed();
                do ball.move();
                do bat.draw();
                do check_position();
                do scene.draw();
                do printScore();
                do Sys.wait(20);
            }

            /*  
            Arrow keys:
                - left  = 130
                - up    = 131
                - right = 132
                - down  = 133
            */
            if (key = 130) { do bat.setVx(-1); }
	        else {
	            if (key = 132) { do bat.setVx(1); }
		        else {
                    if (key = 131) { do bat.setVy(-1); }
		            else {
                        if (key = 133) { do bat.setVy(1); }
		                else {
                            if (key = 140) { let exit = true; }
		                }
                    }
                }
            }

            // Waits for the key to be released.
            while ((~(key = 0)) & (~exit)) {
                let key = Keyboard.keyPressed();
                do ball.move();
                do bat.move();
                do check_position();
                do scene.draw();
                do printScore();
                do Sys.wait(20);
            }

            // Reinitialized the bat movement to idle
            do bat.setVx(0);
            do bat.setVy(0);
        }

        if (exit) {
            do bat.hide();
            do Output.moveCursor(10,27);
	        do Output.printString("Game Over");
            do Output.moveCursor(12,25);
            do Output.printString("Final Score: ");
            do Output.printInt(score);

            do Output.moveCursor(15,15);
            do Output.printString("Press [q] to quit or [n] to replay");

            while (~ ((key = 78) | (key = 81))) {  // n = 110, q = 113
                let key = Keyboard.keyPressed();
            }

            return (key = 81);
	    }

        return false;
    }

    method void check_position(){
        if (ball.getDepth() = 0) { // only check if the ball is on the player's side i.e depth (or z) = 0
            let exit = ~ ball.intersectBat(bat);
            if (~exit) {
                let score = score + 1;

                // increases the speed of the ball and the bat every 5 points
                if (score - ((score / 5) * 5) = 0) { 
                    do ball.increaseVelocity();
                    do bat.increaseVelocity(4);
                }
                
            }
        }
        return;
    }

}