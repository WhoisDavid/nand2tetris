// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction, b=aluOutput, sel=instruction[15], out=regAinput); // instruction[15] = op code
    
    DMux16(in=instruction, sel=instruction[15], a=instructionA, b=instructionC, b[12]=a, b[11]=c1, b[10]=c2, b[9]=c3, b[8]=c4, b[7]=c5, b[6]=c6, b[5]=d1, b[4]=d2, b[3]=d3, b[0..2]=jumpBits);

    Not(in=instruction[15], out=isAinstruction);
    Or(a=isAinstruction, b=d1, out=loadA); // instructionC[5] = 1st dest bit = d1
    ARegister(in=regAinput, load=loadA, out=regAoutput, out[0..14]=addressM); 

    Mux16(a=regAoutput, b=inM, sel=a, out=aluInputAorM); // instructionC[12] = a-bit

    DRegister(in=aluOutput, load=d2, out=aluInputD); // instructionC[4] = 2nd dest bit = d2

    ALU(x=aluInputD, y=aluInputAorM, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=aluOutput, out=outM, zr=eq, ng=lt);

    And(a=d3, b=true, out=writeM); // instructionC[3] = 3rd dest bit = d3

    DMux8Way(in=true, sel=jumpBits, a=all0, b=jgtCond, c=jeqCond, d=jgeCond, e=jltCond, f=jneCond, g=jleCond, h=jmp);
    
    // All necessary output tests
    Not(in=eq, out=ne);
    Not(in=lt, out=ge);
    And(a=ge, b=ne, out=gt);
    Or(a=lt, b=eq, out=le);
    
    And(a=jgtCond, b=gt, out=jgt);
    And(a=jeqCond, b=eq, out=jeq);
    And(a=jgeCond, b=ge, out=jge);
    And(a=jltCond, b=lt, out=jlt);
    And(a=jneCond, b=ne, out=jne);
    And(a=jleCond, b=le, out=jle);
    
    Or8Way(in[0]=jgt, in[1]=jeq, in[2]=jge, in[3]=jlt, in[4]=jne, in[5]=jle, in[6]=jmp, in[7]=false, out=jumpCondition);
    PC(in=regAoutput, load=jumpCondition, inc=true, reset=reset, out[0..14]=pc);
    
}